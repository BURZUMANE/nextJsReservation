{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/timurzakirov/Documents/self/nextJsReservation/pages/adress.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Typography, Box, CardContent, Card, Button, TextField } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Field, Form, Formik, FormikConfig, FormikValues } from 'formik';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { reservationSlice } from '../lib/slices/reservationSlice';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport { useRouter } from 'next/router';\nimport * as yup from 'yup';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  var script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nvar autocompleteService = {\n  current: null\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    icon: {\n      color: theme.palette.text.secondary,\n      marginRight: theme.spacing(2)\n    }\n  };\n});\nvar validationSchema = yup.object().shape({\n  adress: yup.string().required()\n});\nexport default function Adress() {\n  _s();\n\n  var _this = this;\n\n  var dispatch = useDispatch();\n  var router = useRouter();\n  var classes = useStyles();\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      inputValue = _React$useState4[0],\n      setInputValue = _React$useState4[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      options = _React$useState6[0],\n      setOptions = _React$useState6[1];\n\n  var loaded = React.useRef(false);\n\n  if (true && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript('https://maps.googleapis.com/maps/api/js?key=AIzaSyATyME8aPrEABRhIh8mtOXnfNdQ8ofNEq0&libraries=places', document.querySelector('head'), 'google-maps');\n    }\n\n    loaded.current = true;\n  }\n\n  var fetch = React.useMemo(function () {\n    return throttle(function (request, callback) {\n      autocompleteService.current.getPlacePredictions(request, callback);\n    }, 200);\n  }, []);\n  React.useEffect(function () {\n    var active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, function (results) {\n      if (active) {\n        var newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [].concat(_toConsumableArray(newOptions), _toConsumableArray(results));\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return function () {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  var state = useSelector(function (state) {\n    return state.reservation.location.adress;\n  });\n  return __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      adress: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value) {\n        var coords, latLng, location;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                coords = /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {\n                    var results, latLng;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return geocodeByAddress(value);\n\n                          case 2:\n                            results = _context.sent;\n                            _context.next = 5;\n                            return getLatLng(results[0]);\n\n                          case 5:\n                            latLng = _context.sent;\n                            return _context.abrupt(\"return\", latLng);\n\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function coords(_x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }();\n\n                _context2.next = 3;\n                return coords(value.adress.description);\n\n              case 3:\n                latLng = _context2.sent;\n                location = {\n                  adress: value.adress.description,\n                  latLng: latLng\n                };\n                dispatch(reservationSlice.actions.setAdress(location));\n                router.push('/summary');\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, function (_ref3) {\n    var isSubmitting = _ref3.isSubmitting,\n        values = _ref3.values,\n        setFieldValue = _ref3.setFieldValue,\n        errors = _ref3.errors;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }, __jsx(Autocomplete, {\n      id: \"google-map-demo\",\n      style: {\n        width: 300\n      },\n      getOptionLabel: function getOptionLabel(option) {\n        return typeof option === 'string' ? option : option.description;\n      },\n      filterOptions: function filterOptions(x) {\n        return x;\n      },\n      options: options,\n      autoComplete: true,\n      includeInputInList: true,\n      filterSelectedOptions: true,\n      value: state,\n      onChange: function onChange(event, newValue) {\n        dispatch(reservationSlice.actions.setAdresDesc(newValue.description));\n        return setFieldValue('adress', newValue);\n      },\n      onInputChange: function onInputChange(event, newInputValue) {\n        setInputValue(newInputValue);\n      },\n      renderInput: function renderInput(params) {\n        return __jsx(TextField, _extends({}, params, {\n          label: \"Add a location\",\n          variant: \"outlined\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 19\n          }\n        }));\n      },\n      renderOption: function renderOption(option) {\n        var matches = option.structured_formatting.main_text_matched_substrings;\n        var parts = parse(option.structured_formatting.main_text, matches.map(function (match) {\n          return [match.offset, match.offset + match.length];\n        }));\n        return __jsx(Grid, {\n          container: true,\n          alignItems: \"center\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 21\n          }\n        }, __jsx(Grid, {\n          item: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 23\n          }\n        }, __jsx(LocationOnIcon, {\n          className: classes.icon,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }\n        })), __jsx(Grid, {\n          item: true,\n          xs: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 23\n          }\n        }, parts.map(function (part, index) {\n          return __jsx(\"span\", {\n            key: index,\n            style: {\n              fontWeight: part.highlight ? 700 : 400\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 27\n            }\n          }, part.text);\n        }), __jsx(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }\n        }, option.structured_formatting.secondary_text)));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }\n    }), __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 15\n      }\n    }, \"Submit\"));\n  })));\n}\n\n_s(Adress, \"ITTYpWaIdGI5REaACc0LfYHVPHY=\", false, function () {\n  return [useDispatch, useRouter, useStyles, useSelector];\n});\n\n_c = Adress;\n\nvar _c;\n\n$RefreshReg$(_c, \"Adress\");","map":{"version":3,"sources":["/Users/timurzakirov/Documents/self/nextJsReservation/pages/adress.js"],"names":["Typography","Box","CardContent","Card","Button","TextField","useDispatch","useSelector","Field","Form","Formik","FormikConfig","FormikValues","Autocomplete","reservationSlice","LocationOnIcon","Grid","makeStyles","parse","throttle","useRouter","yup","PlacesAutocomplete","geocodeByAddress","getLatLng","loadScript","src","position","id","script","document","createElement","setAttribute","appendChild","autocompleteService","current","useStyles","theme","icon","color","palette","text","secondary","marginRight","spacing","validationSchema","object","shape","adress","string","required","Adress","dispatch","router","classes","React","useState","value","setValue","inputValue","setInputValue","options","setOptions","loaded","useRef","querySelector","fetch","useMemo","request","callback","getPlacePredictions","useEffect","active","window","google","maps","places","AutocompleteService","undefined","input","results","newOptions","state","reservation","location","coords","latLng","description","actions","setAdress","push","isSubmitting","values","setFieldValue","errors","width","option","x","event","newValue","setAdresDesc","newInputValue","params","matches","structured_formatting","main_text_matched_substrings","parts","main_text","map","match","offset","length","part","index","fontWeight","highlight","secondary_text"],"mappings":"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","sourcesContent":["import {\n  Typography,\n  Box,\n  CardContent,\n  Card,\n  Button,\n  TextField,\n} from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Field, Form, Formik, FormikConfig, FormikValues } from 'formik';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { reservationSlice } from '../lib/slices/reservationSlice';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport { useRouter } from 'next/router';\nimport * as yup from 'yup';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2),\n  },\n}));\n\nconst validationSchema = yup.object().shape({\n  adress: yup.string().required(),\n});\n\nexport default function Adress() {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const classes = useStyles();\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState('');\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== 'undefined' && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript(\n        'https://maps.googleapis.com/maps/api/js?key=AIzaSyATyME8aPrEABRhIh8mtOXnfNdQ8ofNEq0&libraries=places',\n        document.querySelector('head'),\n        'google-maps'\n      );\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    []\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results) => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  const state = useSelector((state) => state.reservation.location.adress);\n  return (\n    <Card>\n      <CardContent>\n        <Formik\n          initialValues={{\n            adress: '',\n          }}\n          validationSchema={validationSchema}\n          onSubmit={async (value) => {\n            const coords = async (value) => {\n              const results = await geocodeByAddress(value);\n              const latLng = await getLatLng(results[0]);\n              return latLng;\n            };\n            const latLng = await coords(value.adress.description);\n            const location = { adress: value.adress.description, latLng };\n            dispatch(reservationSlice.actions.setAdress(location));\n            router.push('/summary');\n          }}\n        >\n          {({ isSubmitting, values, setFieldValue, errors }) => (\n            <Form>\n              <Autocomplete\n                id=\"google-map-demo\"\n                style={{ width: 300 }}\n                getOptionLabel={(option) =>\n                  typeof option === 'string' ? option : option.description\n                }\n                filterOptions={(x) => x}\n                options={options}\n                autoComplete\n                includeInputInList\n                filterSelectedOptions\n                value={state}\n                onChange={(event, newValue) => {\n                  dispatch(\n                    reservationSlice.actions.setAdresDesc(newValue.description)\n                  );\n                  return setFieldValue('adress', newValue);\n                }}\n                onInputChange={(event, newInputValue) => {\n                  setInputValue(newInputValue);\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Add a location\"\n                    variant=\"outlined\"\n                  />\n                )}\n                renderOption={(option) => {\n                  const matches =\n                    option.structured_formatting.main_text_matched_substrings;\n                  const parts = parse(\n                    option.structured_formatting.main_text,\n                    matches.map((match) => [\n                      match.offset,\n                      match.offset + match.length,\n                    ])\n                  );\n\n                  return (\n                    <Grid container alignItems=\"center\">\n                      <Grid item>\n                        <LocationOnIcon className={classes.icon} />\n                      </Grid>\n                      <Grid item xs>\n                        {parts.map((part, index) => (\n                          <span\n                            key={index}\n                            style={{ fontWeight: part.highlight ? 700 : 400 }}\n                          >\n                            {part.text}\n                          </span>\n                        ))}\n\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          {option.structured_formatting.secondary_text}\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                  );\n                }}\n              />\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </CardContent>\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}