{"ast":null,"code":"var _jsxFileName = \"/Users/timurzakirov/Documents/self/nextJsReservation/pages/adress.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Typography, Box, CardContent, Card, Button, TextField } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Field, Form, Formik, FormikConfig, FormikValues } from 'formik';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { reservationSlice } from '../lib/slices/reservationSlice';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport { useRouter } from 'next/router';\nimport * as yup from 'yup';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = {\n  current: null\n};\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2)\n  }\n}));\nconst validationSchema = yup.object().shape({\n  adress: yup.string().required()\n});\nexport default function Adress() {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const classes = useStyles();\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState('');\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false); // if (typeof window !== 'undefined' && !loaded.current) {\n  //   if (!document.querySelector('#google-maps')) {\n  //     loadScript(\n  //       'https://maps.googleapis.com/maps/api/js?key=AIzaSyATyME8aPrEABRhIh8mtOXnfNdQ8ofNEq0&libraries=places',\n  //       document.querySelector('head'),\n  //       'google-maps'\n  //     );\n  //   }\n  //   loaded.current = true;\n  // }\n\n  function removeGoogleMapScript() {\n    console.debug('removing google script...');\n    let keywords = ['maps.googleapis']; //Remove google from BOM (window object)\n\n    window.google = undefined; //Remove google map scripts from DOM\n\n    let scripts = document.head.getElementsByTagName('script');\n\n    for (let i = scripts.length - 1; i >= 0; i--) {\n      let scriptSource = scripts[i].getAttribute('src');\n\n      if (scriptSource != null) {\n        if (keywords.filter(item => scriptSource.includes(item)).length) {\n          scripts[i].remove(); // scripts[i].parentNode.removeChild(scripts[i]);\n        }\n      }\n    }\n  }\n\n  const fetch = React.useMemo(() => throttle((request, callback) => {\n    autocompleteService.current.getPlacePredictions(request, callback);\n  }, 200), []);\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, results => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  const state = useSelector(state => state.reservation.location.adress);\n  return __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      adress: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: async value => {\n      const coords = async value => {\n        const results = await geocodeByAddress(value);\n        const latLng = await getLatLng(results[0]);\n        return latLng;\n      };\n\n      const latLng = await coords(value.adress.description);\n      const location = {\n        adress: value.adress.description,\n        latLng\n      };\n      dispatch(reservationSlice.actions.setAdress(location));\n      removeGoogleMapScript();\n      router.push('/summary');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, ({\n    isSubmitting,\n    values,\n    setFieldValue,\n    errors\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, __jsx(Autocomplete, {\n    id: \"google-map-demo\",\n    style: {\n      width: 300\n    },\n    getOptionLabel: option => typeof option === 'string' ? option : option.description,\n    filterOptions: x => x,\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    filterSelectedOptions: true,\n    value: state,\n    onChange: (event, newValue) => {\n      dispatch(reservationSlice.actions.setAdresDesc(newValue.description));\n      return setFieldValue('adress', newValue);\n    },\n    onInputChange: (event, newInputValue) => {\n      setInputValue(newInputValue);\n    },\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Add a location\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 19\n      }\n    })),\n    renderOption: option => {\n      const matches = option.structured_formatting.main_text_matched_substrings;\n      const parts = parse(option.structured_formatting.main_text, matches.map(match => [match.offset, match.offset + match.length]));\n      return __jsx(Grid, {\n        container: true,\n        alignItems: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }\n      }, __jsx(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 23\n        }\n      }, __jsx(LocationOnIcon, {\n        className: classes.icon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }\n      })), __jsx(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 23\n        }\n      }, parts.map((part, index) => __jsx(\"span\", {\n        key: index,\n        style: {\n          fontWeight: part.highlight ? 700 : 400\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 27\n        }\n      }, part.text)), __jsx(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }\n      }, option.structured_formatting.secondary_text)));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }, \"Submit\")))));\n}","map":{"version":3,"sources":["/Users/timurzakirov/Documents/self/nextJsReservation/pages/adress.js"],"names":["Typography","Box","CardContent","Card","Button","TextField","useDispatch","useSelector","Field","Form","Formik","FormikConfig","FormikValues","Autocomplete","reservationSlice","LocationOnIcon","Grid","makeStyles","parse","throttle","useRouter","yup","PlacesAutocomplete","geocodeByAddress","getLatLng","loadScript","src","position","id","script","document","createElement","setAttribute","appendChild","autocompleteService","current","useStyles","theme","icon","color","palette","text","secondary","marginRight","spacing","validationSchema","object","shape","adress","string","required","Adress","dispatch","router","classes","value","setValue","React","useState","inputValue","setInputValue","options","setOptions","loaded","useRef","removeGoogleMapScript","console","debug","keywords","window","google","undefined","scripts","head","getElementsByTagName","i","length","scriptSource","getAttribute","filter","item","includes","remove","fetch","useMemo","request","callback","getPlacePredictions","useEffect","active","maps","places","AutocompleteService","input","results","newOptions","state","reservation","location","coords","latLng","description","actions","setAdress","push","isSubmitting","values","setFieldValue","errors","width","option","x","event","newValue","setAdresDesc","newInputValue","params","matches","structured_formatting","main_text_matched_substrings","parts","main_text","map","match","offset","part","index","fontWeight","highlight","secondary_text"],"mappings":"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","sourcesContent":["import {\n  Typography,\n  Box,\n  CardContent,\n  Card,\n  Button,\n  TextField,\n} from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Field, Form, Formik, FormikConfig, FormikValues } from 'formik';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { reservationSlice } from '../lib/slices/reservationSlice';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport { useRouter } from 'next/router';\nimport * as yup from 'yup';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2),\n  },\n}));\n\nconst validationSchema = yup.object().shape({\n  adress: yup.string().required(),\n});\n\nexport default function Adress() {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const classes = useStyles();\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState('');\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  // if (typeof window !== 'undefined' && !loaded.current) {\n  //   if (!document.querySelector('#google-maps')) {\n  //     loadScript(\n  //       'https://maps.googleapis.com/maps/api/js?key=AIzaSyATyME8aPrEABRhIh8mtOXnfNdQ8ofNEq0&libraries=places',\n  //       document.querySelector('head'),\n  //       'google-maps'\n  //     );\n  //   }\n\n  //   loaded.current = true;\n  // }\n\n  function removeGoogleMapScript() {\n    console.debug('removing google script...');\n    let keywords = ['maps.googleapis'];\n\n    //Remove google from BOM (window object)\n    window.google = undefined;\n\n    //Remove google map scripts from DOM\n    let scripts = document.head.getElementsByTagName('script');\n    for (let i = scripts.length - 1; i >= 0; i--) {\n      let scriptSource = scripts[i].getAttribute('src');\n      if (scriptSource != null) {\n        if (keywords.filter((item) => scriptSource.includes(item)).length) {\n          scripts[i].remove();\n          // scripts[i].parentNode.removeChild(scripts[i]);\n        }\n      }\n    }\n  }\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    []\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results) => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  const state = useSelector((state) => state.reservation.location.adress);\n  return (\n    <Card>\n      <CardContent>\n        <Formik\n          initialValues={{\n            adress: '',\n          }}\n          validationSchema={validationSchema}\n          onSubmit={async (value) => {\n            const coords = async (value) => {\n              const results = await geocodeByAddress(value);\n              const latLng = await getLatLng(results[0]);\n              return latLng;\n            };\n            const latLng = await coords(value.adress.description);\n            const location = { adress: value.adress.description, latLng };\n            dispatch(reservationSlice.actions.setAdress(location));\n            removeGoogleMapScript();\n            router.push('/summary');\n          }}\n        >\n          {({ isSubmitting, values, setFieldValue, errors }) => (\n            <Form>\n              <Autocomplete\n                id=\"google-map-demo\"\n                style={{ width: 300 }}\n                getOptionLabel={(option) =>\n                  typeof option === 'string' ? option : option.description\n                }\n                filterOptions={(x) => x}\n                options={options}\n                autoComplete\n                includeInputInList\n                filterSelectedOptions\n                value={state}\n                onChange={(event, newValue) => {\n                  dispatch(\n                    reservationSlice.actions.setAdresDesc(newValue.description)\n                  );\n                  return setFieldValue('adress', newValue);\n                }}\n                onInputChange={(event, newInputValue) => {\n                  setInputValue(newInputValue);\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Add a location\"\n                    variant=\"outlined\"\n                  />\n                )}\n                renderOption={(option) => {\n                  const matches =\n                    option.structured_formatting.main_text_matched_substrings;\n                  const parts = parse(\n                    option.structured_formatting.main_text,\n                    matches.map((match) => [\n                      match.offset,\n                      match.offset + match.length,\n                    ])\n                  );\n\n                  return (\n                    <Grid container alignItems=\"center\">\n                      <Grid item>\n                        <LocationOnIcon className={classes.icon} />\n                      </Grid>\n                      <Grid item xs>\n                        {parts.map((part, index) => (\n                          <span\n                            key={index}\n                            style={{ fontWeight: part.highlight ? 700 : 400 }}\n                          >\n                            {part.text}\n                          </span>\n                        ))}\n\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          {option.structured_formatting.secondary_text}\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                  );\n                }}\n              />\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </CardContent>\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}