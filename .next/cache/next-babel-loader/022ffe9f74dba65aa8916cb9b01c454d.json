{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Typography, Box, CardContent, Card, Button, TextField } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Field, Form, Formik, FormikConfig, FormikValues } from 'formik';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { reservationSlice } from '../lib/slices/reservationSlice';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport { useRouter } from 'next/router';\nimport * as yup from 'yup';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  var script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nvar autocompleteService = {\n  current: null\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    icon: {\n      color: theme.palette.text.secondary,\n      marginRight: theme.spacing(2)\n    }\n  };\n});\nvar validationSchema = yup.object().shape({\n  adress: yup.string().required()\n});\nexport default function Adress() {\n  var dispatch = useDispatch();\n  var router = useRouter();\n  var classes = useStyles();\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      inputValue = _React$useState4[0],\n      setInputValue = _React$useState4[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      options = _React$useState6[0],\n      setOptions = _React$useState6[1];\n\n  var loaded = React.useRef(false); // if (typeof window !== 'undefined' && !loaded.current) {\n  //   if (!document.querySelector('#google-maps')) {\n  //     loadScript(\n  //       'https://maps.googleapis.com/maps/api/js?key=AIzaSyATyME8aPrEABRhIh8mtOXnfNdQ8ofNEq0&libraries=places',\n  //       document.querySelector('head'),\n  //       'google-maps'\n  //     );\n  //   }\n  //   loaded.current = true;\n  // }\n\n  var fetch = React.useMemo(function () {\n    return throttle(function (request, callback) {\n      autocompleteService.current.getPlacePredictions(request, callback);\n    }, 200);\n  }, []);\n  React.useEffect(function () {\n    var active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, function (results) {\n      if (active) {\n        var newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [].concat(_toConsumableArray(newOptions), _toConsumableArray(results));\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return function () {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  var state = useSelector(function (state) {\n    return state.reservation.location.adress;\n  });\n  return __jsx(Card, null, __jsx(CardContent, null, __jsx(Formik, {\n    initialValues: {\n      adress: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value) {\n        var coords, latLng, location;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                coords = /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {\n                    var results, latLng;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return geocodeByAddress(value);\n\n                          case 2:\n                            results = _context.sent;\n                            _context.next = 5;\n                            return getLatLng(results[0]);\n\n                          case 5:\n                            latLng = _context.sent;\n                            return _context.abrupt(\"return\", latLng);\n\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function coords(_x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }();\n\n                _context2.next = 3;\n                return coords(value.adress.description);\n\n              case 3:\n                latLng = _context2.sent;\n                location = {\n                  adress: value.adress.description,\n                  latLng: latLng\n                };\n                dispatch(reservationSlice.actions.setAdress(location));\n                router.push('/summary');\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  }, function (_ref3) {\n    var isSubmitting = _ref3.isSubmitting,\n        values = _ref3.values,\n        setFieldValue = _ref3.setFieldValue,\n        errors = _ref3.errors;\n    return __jsx(Form, null, __jsx(Autocomplete, {\n      id: \"google-map-demo\",\n      style: {\n        width: 300\n      },\n      getOptionLabel: function getOptionLabel(option) {\n        return typeof option === 'string' ? option : option.description;\n      },\n      filterOptions: function filterOptions(x) {\n        return x;\n      },\n      options: options,\n      autoComplete: true,\n      includeInputInList: true,\n      filterSelectedOptions: true,\n      value: state,\n      onChange: function onChange(event, newValue) {\n        dispatch(reservationSlice.actions.setAdresDesc(newValue.description));\n        return setFieldValue('adress', newValue);\n      },\n      onInputChange: function onInputChange(event, newInputValue) {\n        setInputValue(newInputValue);\n      },\n      renderInput: function renderInput(params) {\n        return __jsx(TextField, _extends({}, params, {\n          label: \"Add a location\",\n          variant: \"outlined\"\n        }));\n      },\n      renderOption: function renderOption(option) {\n        var matches = option.structured_formatting.main_text_matched_substrings;\n        var parts = parse(option.structured_formatting.main_text, matches.map(function (match) {\n          return [match.offset, match.offset + match.length];\n        }));\n        return __jsx(Grid, {\n          container: true,\n          alignItems: \"center\"\n        }, __jsx(Grid, {\n          item: true\n        }, __jsx(LocationOnIcon, {\n          className: classes.icon\n        })), __jsx(Grid, {\n          item: true,\n          xs: true\n        }, parts.map(function (part, index) {\n          return __jsx(\"span\", {\n            key: index,\n            style: {\n              fontWeight: part.highlight ? 700 : 400\n            }\n          }, part.text);\n        }), __jsx(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\"\n        }, option.structured_formatting.secondary_text)));\n      }\n    }), __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\"\n    }, \"Submit\"));\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}