{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Typography, Box, CardContent, Card, Button, TextField } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Field, Form, Formik, FormikConfig, FormikValues } from 'formik';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { reservationSlice } from '../lib/slices/reservationSlice';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport { useRouter } from 'next/router';\nimport * as yup from 'yup';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = {\n  current: null\n};\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2)\n  }\n}));\nconst validationSchema = yup.object().shape({\n  adress: yup.string().required()\n});\nexport default function Adress() {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const classes = useStyles();\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState('');\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (false && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript('https://maps.googleapis.com/maps/api/js?key=AIzaSyATyME8aPrEABRhIh8mtOXnfNdQ8ofNEq0&libraries=places', document.querySelector('head'), 'google-maps');\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = React.useMemo(() => throttle((request, callback) => {\n    autocompleteService.current.getPlacePredictions(request, callback);\n  }, 200), []);\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, results => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  const state = useSelector(state => state.reservation.location.adress);\n  return __jsx(Card, null, __jsx(CardContent, null, __jsx(Formik, {\n    initialValues: {\n      adress: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: async value => {\n      const coords = async value => {\n        const results = await geocodeByAddress(value);\n        const latLng = await getLatLng(results[0]);\n        return latLng;\n      };\n\n      const latLng = await coords(value.adress.description);\n      const location = {\n        adress: value.adress.description,\n        latLng\n      };\n      dispatch(reservationSlice.actions.setAdress(location));\n      router.push('/summary');\n    }\n  }, ({\n    isSubmitting,\n    values,\n    setFieldValue,\n    errors\n  }) => __jsx(Form, null, __jsx(Autocomplete, {\n    id: \"google-map-demo\",\n    style: {\n      width: 300\n    },\n    getOptionLabel: option => typeof option === 'string' ? option : option.description,\n    filterOptions: x => x,\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    filterSelectedOptions: true,\n    value: state,\n    onChange: (event, newValue) => {\n      dispatch(reservationSlice.actions.setAdresDesc(newValue.description));\n      return setFieldValue('adress', newValue);\n    },\n    onInputChange: (event, newInputValue) => {\n      setInputValue(newInputValue);\n    },\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Add a location\",\n      variant: \"outlined\"\n    })),\n    renderOption: option => {\n      const matches = option.structured_formatting.main_text_matched_substrings;\n      const parts = parse(option.structured_formatting.main_text, matches.map(match => [match.offset, match.offset + match.length]));\n      return __jsx(Grid, {\n        container: true,\n        alignItems: \"center\"\n      }, __jsx(Grid, {\n        item: true\n      }, __jsx(LocationOnIcon, {\n        className: classes.icon\n      })), __jsx(Grid, {\n        item: true,\n        xs: true\n      }, parts.map((part, index) => __jsx(\"span\", {\n        key: index,\n        style: {\n          fontWeight: part.highlight ? 700 : 400\n        }\n      }, part.text)), __jsx(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\"\n      }, option.structured_formatting.secondary_text)));\n    }\n  }), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\"\n  }, \"Submit\")))));\n}","map":null,"metadata":{},"sourceType":"module"}