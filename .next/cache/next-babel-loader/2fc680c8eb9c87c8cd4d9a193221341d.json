{"ast":null,"code":"var _jsxFileName = \"/Users/timurzakirov/Documents/self/nextJsReservation/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Typography, Box, CardContent, Card, Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport DatePicker from 'react-datepicker';\nimport { Field, Form, Formik, FormikConfig, FormikValues, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useRouter } from 'next/router';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { reservationSlice } from '../lib/slices/reservationSlice';\nimport ResetButton from '../components/ResetButton';\nconst twoHours = new Date();\ntwoHours.setHours(twoHours.getHours() + 2);\nconst validationSchema = yup.object().shape({\n  startDate: yup.mixed().test('isAfter', 'Check should be at least two hours in advance', value => {\n    return value >= twoHours;\n  }).required('required'),\n  endDate: yup.date().when('startDate', (startDate, schema) => {\n    return yup.date().min(startDate, 'Check should be at least two hours after check in').required('required');\n  }).required('Must enter end date')\n});\n\nconst IndexPage = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  return __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Please choose a checkin and checkout dates\"), __jsx(Formik, {\n    initialValues: {\n      startDate: new Date(),\n      endDate: new Date()\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      // same shape as initial values\n      const dates = {\n        startDate: values.startDate,\n        endDate: values.endDate\n      };\n      dispatch(reservationSlice.actions.setDates(dates));\n      router.push('/adress');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, ({\n    isSubmitting,\n    values,\n    setFieldValue,\n    errors\n  }) => {\n    console.log(values.endDate);\n    const dates = useSelector(state => state.reservation.dates);\n    console.log(dates.endDate);\n\n    if (dates.startDate !== '') {\n      values.startDate = new Date(dates.startDate);\n    } else {\n      values.startDate = new Date();\n    }\n\n    if (dates.endDate !== '') {\n      values.endDate = new Date(dates.endDate);\n    } else {\n      values.endDate = new Date();\n    }\n\n    console.log(values);\n    return __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }\n    }, __jsx(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 19\n      }\n    }, __jsx(Box, {\n      marginBottom: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, __jsx(DatePicker, {\n      timeInputLabel: \"Time:\",\n      dateFormat: \"MM/dd/yyyy h:mm\",\n      showTimeInput: true,\n      selected: values.startDate,\n      className: \"form-control\",\n      name: \"startDate\",\n      onChange: date => {\n        dispatch(reservationSlice.actions.setStart(date)); // setFieldValue('startDate', date)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 23\n      }\n    }), __jsx(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 23\n      }\n    }, __jsx(ErrorMessage, {\n      name: \"startDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    })))), __jsx(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 19\n      }\n    }, __jsx(Box, {\n      marginBottom: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, __jsx(DatePicker, {\n      timeInputLabel: \"Time:\",\n      dateFormat: \"MM/dd/yyyy h:mm\",\n      showTimeInput: true,\n      selected: values.endDate,\n      className: \"form-control\",\n      name: \"endDate\",\n      onChange: date => {\n        console.log('dasdas');\n        dispatch(reservationSlice.actions.setEnd(date)); // setFieldValue('endDate', date)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 23\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"endDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 23\n      }\n    })))), __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, \"Next\"), __jsx(ResetButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }));\n  })));\n};\n\nexport default IndexPage; // .date()\n// .min(twoHours, `check in date must be at least two hours in advance`)\n// .required('Must enter start date'),","map":{"version":3,"sources":["/Users/timurzakirov/Documents/self/nextJsReservation/pages/index.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Typography","Box","CardContent","Card","Button","Grid","DatePicker","Field","Form","Formik","FormikConfig","FormikValues","ErrorMessage","yup","useRouter","DateFnsUtils","reservationSlice","ResetButton","twoHours","Date","setHours","getHours","validationSchema","object","shape","startDate","mixed","test","value","required","endDate","date","when","schema","min","IndexPage","dispatch","router","values","dates","actions","setDates","push","isSubmitting","setFieldValue","errors","console","log","state","reservation","setStart","setEnd"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Typography, Box, CardContent, Card, Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport DatePicker from 'react-datepicker';\nimport {\n  Field,\n  Form,\n  Formik,\n  FormikConfig,\n  FormikValues,\n  ErrorMessage,\n} from 'formik';\nimport * as yup from 'yup';\nimport { useRouter } from 'next/router';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { reservationSlice } from '../lib/slices/reservationSlice';\nimport ResetButton from '../components/ResetButton';\n\nconst twoHours = new Date();\ntwoHours.setHours(twoHours.getHours() + 2);\n\nconst validationSchema = yup.object().shape({\n  startDate: yup\n    .mixed()\n    .test(\n      'isAfter',\n      'Check should be at least two hours in advance',\n      (value) => {\n        return value >= twoHours;\n      }\n    )\n    .required('required'),\n  endDate: yup\n    .date()\n    .when('startDate', (startDate, schema) => {\n      return yup\n        .date()\n        .min(startDate, 'Check should be at least two hours after check in')\n        .required('required');\n    })\n    .required('Must enter end date'),\n});\nconst IndexPage = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\">\n          Please choose a checkin and checkout dates\n        </Typography>\n        <Formik\n          initialValues={{\n            startDate: new Date(),\n            endDate: new Date(),\n          }}\n          validationSchema={validationSchema}\n          onSubmit={(values) => {\n            // same shape as initial values\n            const dates = {\n              startDate: values.startDate,\n              endDate: values.endDate,\n            };\n            dispatch(reservationSlice.actions.setDates(dates));\n            router.push('/adress');\n          }}\n        >\n          {({ isSubmitting, values, setFieldValue, errors }) => {\n            console.log(values.endDate);\n            const dates = useSelector((state) => state.reservation.dates);\n            console.log(dates.endDate);\n            if (dates.startDate !== '') {\n              values.startDate = new Date(dates.startDate);\n            } else {\n              values.startDate = new Date();\n            }\n            if (dates.endDate !== '') {\n              values.endDate = new Date(dates.endDate);\n            } else {\n              values.endDate = new Date();\n            }\n            console.log(values);\n            return (\n              <Form>\n                <Grid container>\n                  <Grid item xs={6}>\n                    <Box marginBottom={5}>\n                      <DatePicker\n                        timeInputLabel=\"Time:\"\n                        dateFormat=\"MM/dd/yyyy h:mm\"\n                        showTimeInput\n                        selected={values.startDate}\n                        className=\"form-control\"\n                        name=\"startDate\"\n                        onChange={(date) => {\n                          dispatch(reservationSlice.actions.setStart(date));\n                          // setFieldValue('startDate', date)\n                        }}\n                      />\n                      <Box>\n                        <ErrorMessage name=\"startDate\" />\n                      </Box>\n                    </Box>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Box marginBottom={5}>\n                      <DatePicker\n                        timeInputLabel=\"Time:\"\n                        dateFormat=\"MM/dd/yyyy h:mm\"\n                        showTimeInput\n                        selected={values.endDate}\n                        className=\"form-control\"\n                        name=\"endDate\"\n                        onChange={(date) => {\n                          console.log('dasdas');\n                          dispatch(reservationSlice.actions.setEnd(date));\n                          // setFieldValue('endDate', date)\n                        }}\n                      />\n                      <ErrorMessage name=\"endDate\" />\n                    </Box>\n                  </Grid>\n                </Grid>\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                  Next\n                </Button>\n                <ResetButton />\n              </Form>\n            );\n          }}\n        </Formik>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default IndexPage;\n\n// .date()\n// .min(twoHours, `check in date must be at least two hours in advance`)\n// .required('Must enter start date'),\n"]},"metadata":{},"sourceType":"module"}