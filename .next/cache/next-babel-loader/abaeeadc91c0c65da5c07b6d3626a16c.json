{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Typography, Box, CardContent, Card, Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport DatePicker from 'react-datepicker';\nimport { Field, Form, Formik, FormikConfig, FormikValues, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useRouter } from 'next/router';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { reservationSlice } from '../lib/slices/reservationSlice';\nimport ResetButton from '../components/ResetButton';\nvar twoHours = new Date();\ntwoHours.setHours(twoHours.getHours() + 2);\nvar validationSchema = yup.object().shape({\n  startDate: yup.mixed().test('isAfter', 'Check should be at least two hours in advance', function (value) {\n    return value >= twoHours;\n  }).required('required'),\n  endDate: yup.date().when('startDate', function (startDate, schema) {\n    return yup.date().min(startDate, 'Check should be at least two hours after check in').required('required');\n  }).required('Must enter end date')\n});\n\nvar IndexPage = function IndexPage() {\n  var dispatch = useDispatch();\n  var router = useRouter();\n  return __jsx(Card, null, __jsx(CardContent, null, __jsx(Typography, {\n    variant: \"h6\"\n  }, \"Please choose a checkin and checkout dates\"), __jsx(Formik, {\n    initialValues: {\n      startDate: new Date(),\n      endDate: new Date()\n    },\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values) {\n      // same shape as initial values\n      var dates = {\n        startDate: values.startDate,\n        endDate: values.endDate\n      };\n      dispatch(reservationSlice.actions.setDates(dates));\n      router.push('/adress');\n    }\n  }, function (_ref) {\n    var isSubmitting = _ref.isSubmitting,\n        values = _ref.values,\n        setFieldValue = _ref.setFieldValue,\n        errors = _ref.errors;\n    var dates = useSelector(function (state) {\n      return state.reservation.dates;\n    });\n\n    if (dates.startDate !== '') {\n      values.startDate = new Date(dates.startDate);\n    } else {\n      values.startDate = new Date();\n    }\n\n    if (dates.endDate !== '') {\n      values.endDate = new Date(dates.endDate);\n    } else {\n      values.endDate = new Date();\n    }\n\n    return __jsx(Form, null, __jsx(Grid, {\n      container: true\n    }, __jsx(Grid, {\n      item: true,\n      xs: 6\n    }, __jsx(Box, {\n      marginBottom: 5\n    }, __jsx(DatePicker, {\n      timeInputLabel: \"Time:\",\n      dateFormat: \"MM/dd/yyyy h:mm\",\n      showTimeInput: true,\n      selected: values.startDate,\n      className: \"form-control\",\n      name: \"startDate\",\n      onChange: function onChange(date) {\n        dispatch(reservationSlice.actions.setStart(date)); // setFieldValue('startDate', date)\n      }\n    }), __jsx(Box, null, __jsx(ErrorMessage, {\n      name: \"startDate\"\n    })))), __jsx(Grid, {\n      item: true,\n      xs: 6\n    }, __jsx(Box, {\n      marginBottom: 5\n    }, __jsx(DatePicker, {\n      timeInputLabel: \"Time:\",\n      dateFormat: \"MM/dd/yyyy h:mm\",\n      showTimeInput: true,\n      selected: values.endDate,\n      className: \"form-control\",\n      name: \"endDate\",\n      onChange: function onChange(date) {\n        dispatch(reservationSlice.actions.setEnd(date)); // setFieldValue('endDate', date)\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"endDate\"\n    })))), __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\"\n    }, \"Next\"), __jsx(ResetButton, null));\n  })));\n};\n\nexport default IndexPage; // .date()\n// .min(twoHours, `check in date must be at least two hours in advance`)\n// .required('Must enter start date'),","map":null,"metadata":{},"sourceType":"module"}